/*
 * NMRFx Structure : A Program for Calculating Structures 
 * Copyright (C) 2004-2017 One Moon Scientific, Inc., Westfield, N.J., USA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.nmrfx.structure.chemistry;

import com.google.common.collect.HashBiMap;
import java.util.*;
import org.nmrfx.structure.chemistry.energy.RingCurrentShift;

public class ProteinPredictor {

    private final Polymer polymer;

    Map<String, HydrogenBond> hBondMapHA = null;
    Map<String, Double> eShiftMapHA = null;

    Map<String, HydrogenBond> hBondMapH = null;
    Map<String, Double> eShiftMapH = null;
    Map<String, Double> lcmbMap = null;

    private static final int CHARGE = 0;
    private static final int HYDROPHOBICITY = 1;
    private static final int AROMATIC = 2;
    private static final int PROLINE = 3;
    private static final int BULK = 4;
    private static final int DISULFIDE = 5;
    private static final String[] PROPS = {"chrg", "hphb", "aro", "pro", "bulk", "dis"};
    private static final HashMap<String, Integer> residueNames = new HashMap<>();

    private static final int ALA = 0;
    private static final int ARG = 1;
    private static final int ASN = 2;
    private static final int ASP = 3;
    private static final int CYS = 4;
    private static final int GLU = 5;
    private static final int GLN = 6;
    private static final int GLY = 7;
    private static final int HIS = 8;
    private static final int ILE = 9;
    private static final int LEU = 10;
    private static final int LYS = 11;
    private static final int MET = 12;
    private static final int PHE = 13;
    private static final int PRO = 14;
    private static final int SER = 15;
    private static final int THR = 16;
    private static final int TRP = 17;
    private static final int TYR = 18;
    private static final int VAL = 19;
    private static final double[][] properties = new double[20][5];

    static {
        residueNames.put("ALA", 0);
        properties[ALA][CHARGE] = 0;
        properties[ALA][HYDROPHOBICITY] = 0.4;
        properties[ALA][AROMATIC] = 0;
        properties[ALA][PROLINE] = 0;
        properties[ALA][BULK] = 0.1;
        residueNames.put("ARG", 1);
        properties[ARG][CHARGE] = 1;
        properties[ARG][HYDROPHOBICITY] = -1;
        properties[ARG][AROMATIC] = 0;
        properties[ARG][PROLINE] = 0;
        properties[ARG][BULK] = 0.7;
        residueNames.put("ASN", 2);
        properties[ASN][CHARGE] = 0;
        properties[ASN][HYDROPHOBICITY] = -0.777777778;
        properties[ASN][AROMATIC] = 0;
        properties[ASN][PROLINE] = 0;
        properties[ASN][BULK] = 0.4;
        residueNames.put("ASP", 3);
        properties[ASP][CHARGE] = -1;
        properties[ASP][HYDROPHOBICITY] = -0.777777778;
        properties[ASP][AROMATIC] = 0;
        properties[ASP][PROLINE] = 0;
        properties[ASP][BULK] = 0.4;
        residueNames.put("CYS", 4);
        properties[CYS][CHARGE] = 0;
        properties[CYS][HYDROPHOBICITY] = 0.555555556;
        properties[CYS][AROMATIC] = 0;
        properties[CYS][PROLINE] = 0;
        properties[CYS][BULK] = 0.2;
        residueNames.put("GLU", 5);
        properties[GLU][CHARGE] = -1;
        properties[GLU][HYDROPHOBICITY] = -0.777777778;
        properties[GLU][AROMATIC] = 0;
        properties[GLU][PROLINE] = 0;
        properties[GLU][BULK] = 0.5;
        residueNames.put("GLN", 6);
        properties[GLN][CHARGE] = 0;
        properties[GLN][HYDROPHOBICITY] = -0.777777778;
        properties[GLN][AROMATIC] = 0;
        properties[GLN][PROLINE] = 0;
        properties[GLN][BULK] = 0.5;
        residueNames.put("GLY", 7);
        properties[GLY][CHARGE] = 0;
        properties[GLY][HYDROPHOBICITY] = -0.088888889;
        properties[GLY][AROMATIC] = 0;
        properties[GLY][PROLINE] = 0;
        properties[GLY][BULK] = 0;
        residueNames.put("HIS", 8);
        properties[HIS][CHARGE] = 0;
        properties[HIS][HYDROPHOBICITY] = -0.711111111;
        properties[HIS][AROMATIC] = 0.533333333;
        properties[HIS][PROLINE] = 0;
        properties[HIS][BULK] = 0.6;
        residueNames.put("ILE", 9);
        properties[ILE][CHARGE] = 0;
        properties[ILE][HYDROPHOBICITY] = 1;
        properties[ILE][AROMATIC] = 0;
        properties[ILE][PROLINE] = 0;
        properties[ILE][BULK] = 0.4;
        residueNames.put("LEU", 10);
        properties[LEU][CHARGE] = 0;
        properties[LEU][HYDROPHOBICITY] = 0.844444444;
        properties[LEU][AROMATIC] = 0;
        properties[LEU][PROLINE] = 0;
        properties[LEU][BULK] = 0.4;
        residueNames.put("LYS", 11);
        properties[LYS][CHARGE] = 1;
        properties[LYS][HYDROPHOBICITY] = -0.866666667;
        properties[LYS][AROMATIC] = 0;
        properties[LYS][PROLINE] = 0;
        properties[LYS][BULK] = 0.5;
        residueNames.put("MET", 12);
        properties[MET][CHARGE] = 0;
        properties[MET][HYDROPHOBICITY] = 0.422222222;
        properties[MET][AROMATIC] = 0;
        properties[MET][PROLINE] = 0;
        properties[MET][BULK] = 0.4;
        residueNames.put("PHE", 13);
        properties[PHE][CHARGE] = 0;
        properties[PHE][HYDROPHOBICITY] = 0.622222222;
        properties[PHE][AROMATIC] = 0.666666667;
        properties[PHE][PROLINE] = 0;
        properties[PHE][BULK] = 0.7;
        residueNames.put("PRO", 14);
        properties[PRO][CHARGE] = 0;
        properties[PRO][HYDROPHOBICITY] = -0.355555556;
        properties[PRO][AROMATIC] = 0;
        properties[PRO][PROLINE] = 1;
        properties[PRO][BULK] = 0.3;
        residueNames.put("SER", 15);
        properties[SER][CHARGE] = 0;
        properties[SER][HYDROPHOBICITY] = -0.177777778;
        properties[SER][AROMATIC] = 0;
        properties[SER][PROLINE] = 0;
        properties[SER][BULK] = 0.2;
        residueNames.put("THR", 16);
        properties[THR][CHARGE] = 0;
        properties[THR][HYDROPHOBICITY] = -0.155555556;
        properties[THR][AROMATIC] = 0;
        properties[THR][PROLINE] = 0;
        properties[THR][BULK] = 0.3;
        residueNames.put("TRP", 17);
        properties[TRP][CHARGE] = 0;
        properties[TRP][HYDROPHOBICITY] = -0.2;
        properties[TRP][AROMATIC] = 1;
        properties[TRP][PROLINE] = 0;
        properties[TRP][BULK] = 1;
        residueNames.put("TYR", 18);
        properties[TYR][CHARGE] = 0;
        properties[TYR][HYDROPHOBICITY] = -0.288888889;
        properties[TYR][AROMATIC] = 0.666666667;
        properties[TYR][PROLINE] = 0;
        properties[TYR][BULK] = 0.8;
        residueNames.put("VAL", 19);
        properties[VAL][CHARGE] = 0;
        properties[VAL][HYDROPHOBICITY] = 0.933333333;
        properties[VAL][AROMATIC] = 0;
        properties[VAL][PROLINE] = 0;
        properties[VAL][BULK] = 0.3;

    }
    HashMap<String, Integer> aaMap = new HashMap<>();
    ArrayList<String> attrNames = new ArrayList<>();
    double[][] values = {{0.0, 0.0, 0.0796, 0.0, -0.1091, 0.1208, -0.1143, 0.0, -0.1021, 0.081, -0.7172, 0.0, 0.0, 0.0, -0.8049, 0.0, 0.2985, -0.0807, 0.0703, 0.0899, 0.0, 0.0, 0.0153, 0.0, 0.0, -0.1075, -0.1912, 0.0, 0.1568, 0.0, -0.2964, -0.4825, 0.2241, 0.0, 0.0, -0.5077, -0.1629, 0.0888, -0.5493, -0.3237, 0.0, 0.0286, 0.1132, 0.0, 0.194, -0.4545, -0.8574, 0.0, 0.1783, 0.0},
    {-0.6862, -0.9125, 0.2341, 0.4959, 0.1988, 0.0, 0.1732, 0.0, 0.1499, -0.3159, 0.0, 0.0, 0.0, 0.0, -0.4435, -0.1472, 0.3029, 0.2154, 0.0, -0.214, 0.5123, 0.1619, -0.0335, 0.0, 0.0, 0.1716, 0.2048, 0.2995, 0.0, -0.1629, -0.9584, -0.835, 0.0, 0.4944, -0.1127, -0.7258, 0.2168, 0.0, -0.7845, -1.0735, 0.4946, 0.0, -0.3219, 0.0, 0.0, -1.2827, -0.8471, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -0.5166, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2099, 0.0, 0.0, 0.308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1071, 0.0, 0.0, -0.4139, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.6823, -0.7431, -0.3379, 0.0, 0.4842, 0.1846, 0.9754, 0.923, 0.4986, 0.4446, 0.6471, -2.9397, 0.9114, -0.0511, 0.5019, -2.1069, -0.4847, 0.4758, 0.5128, 0.466, 0.2983, 1.4208, -0.0579, -1.9477, 0.0814, -0.2596, 0.6867, 0.3303, 0.4344, 1.1087, -0.5705, 0.8414, 0.7071, 0.0, 0.9507, -1.1713, 1.1497, 0.0, 1.2827, 0.6759, 4.9306, 0.0, 1.3439, 0.1506, 0.2551, -14.1724, -2.8175, 1.5333, 0.0, -0.4987},
    {-0.6803, 0.4707, -0.6828, 0.1711, -0.0448, -0.0765, -0.1966, -0.3073, 0.0937, -0.2148, 0.0, 0.0, 0.0, 0.0299, 0.164, 0.1253, -0.2089, 0.0917, -0.1653, -0.1503, -0.086, -0.1169, -0.0234, 0.1109, -0.0277, 0.3058, -0.1917, 0.0895, -0.1258, 0.1269, -0.7389, 0.0, -0.5003, 0.2386, -0.2039, 0.0, -0.1489, -0.1263, 0.0, -0.7331, 0.2352, -0.0152, -0.0902, -0.2825, 0.0, -0.965, 0.4635, -0.2963, -0.2895, -0.2785},
    {0.0, 0.8017, 0.3162, 0.2347, 0.0, 0.0, 0.1836, 0.0, 0.0, 0.0, -0.9098, 1.2466, -0.2771, 0.0, 0.0, 0.1871, 0.0, 0.0, 0.0, -0.1367, 0.0, 0.0, 0.0, 0.0, -0.0617, 0.0, -0.3774, 0.1127, 0.1977, -0.3421, 0.0, 0.0, 0.5524, 0.0, 0.3967, 0.0, 0.3554, 0.0, 0.0, -0.3089, -0.2942, 0.0, 0.167, -0.1161, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1499},
    {122.7941, 115.8718, 172.5994, 64.3222, 54.9746, 69.031, 52.85, 31.6292, 57.3466, 19.4743, 117.54, 180.8318, 44.4131, 4.2021, 116.0385, 8.5421, 174.1666, 56.9137, 46.2671, 39.7225, 174.3792, 54.4374, 4.074, 46.9159, 3.8493, 63.893, 57.7127, 57.1974, 175.2721, 30.3734, 118.795, 115.1132, 175.9484, 48.8873, 27.9824, 109.3597, 61.259, 174.4048, 116.9643, 116.2879, 64.5028, 8.1416, 39.4287, 174.3752, 175.5142, 144.8533, 117.6131, 29.4976, 174.4979, 175.3084},
    {0.0, 2.6373, 0.0, 0.0, -0.5189, -0.3381, -0.5691, -0.2138, -0.291, 0.0, 0.0, 0.5986, -0.7967, 0.1444, 0.0, 0.0, -0.2753, -0.5036, -0.2414, 0.0, 0.0, -0.3106, 0.0797, 0.0, -0.0543, -0.3605, -0.5278, -0.6928, -0.6855, 0.0, 1.4583, 0.0, -0.8351, -1.0812, 0.1797, 0.0, -0.2622, -0.2455, 0.0, 1.5119, 0.0, 0.1354, -0.4444, 0.0, -0.7189, 1.9276, 1.265, 0.0, 0.0, 0.0},
    {0.0, -0.5183, -0.7434, -0.4102, -0.0751, 0.1418, 0.0, -1.2608, 0.9491, 0.0, 1.54, 3.0043, -0.6196, 0.0, 0.4001, 0.0, 0.0, -0.3616, 0.0, -0.1301, -0.3912, 1.2699, 0.0515, -0.6848, 0.0, 0.1292, -0.1506, 0.0, 0.2591, -1.7137, 1.3267, -2.4238, 0.0, 1.2958, -1.6887, 0.0, 0.0, 0.0, 0.5265, 0.8979, -0.1953, 0.0, -3.5065, 0.218, -0.433, 0.3732, 2.1065, -0.9618, 0.0, 0.0},
    {-0.2087, 5.0357, 1.125, 0.0, 0.5244, -1.2867, 1.5807, -1.4905, 0.9279, -1.3303, -1.0097, 0.0, -0.9237, -0.0911, 1.745, 0.0, -0.1708, 0.5241, 0.6967, -0.7187, 0.8116, 1.5058, -0.0511, -1.6851, 0.0, -0.4622, 1.2881, 0.9189, 0.6129, -2.1928, -1.9788, -1.1965, 0.8475, 0.0, -0.3702, 0.4854, 3.7339, 0.4144, 0.0, 3.9141, 0.0, 0.217, -2.0505, 1.6845, 0.1548, 4.3061, -3.9406, -0.8551, 0.0, 0.2561},
    {-3.0374, -1.5755, 0.0, 1.1082, 0.0, 0.0, 0.6826, 0.0, -0.4114, -1.4956, -2.0673, 0.0, 0.0, 0.0852, 0.5973, -0.7699, 0.2494, 0.1822, 0.0, -0.2608, 1.2276, 0.4547, 0.0395, 0.3653, 0.0898, -0.2795, 0.7906, 0.0, 0.3032, -0.2785, -2.2051, -2.9305, 0.4674, -1.2353, -0.4682, -1.4362, 0.0, 0.0, -1.3718, -3.4342, 3.1336, -0.2281, -1.1364, 0.0, 0.6161, -4.9492, -3.6503, -0.2506, 0.0, 0.0},
    {-0.8412, -0.2521, 0.804, -0.2159, -0.3276, 0.6344, -0.4662, 0.6609, -0.7448, 0.4695, -0.7745, 0.4277, -0.6907, 0.1942, -0.6862, -0.3137, -0.2275, -0.4259, -0.7426, 0.4663, 0.0, -1.5414, 0.1126, 0.0, 0.0, -1.2094, -0.8193, -0.3913, -0.5364, 0.1667, 0.2985, -0.8233, -0.6452, 0.625, 0.2739, -0.282, 0.0, 0.3037, -2.2168, -0.1498, 0.0, -0.0357, 0.1712, -0.1113, 0.0, 0.0, -3.9697, -0.3184, 0.1588, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0612, 0.0, 0.0, 0.0, 0.0, 0.1098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2684, 0.0, 0.0, -0.0564, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1466, 0.0, 0.1215},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8268, 0.4337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.5443, 6.4803, 1.0864, -0.4057, 0.0, -0.4932, 0.8185, -1.3328, 0.5042, -1.148, 0.0, 0.0, -0.2217, 0.0224, 1.841, -0.3382, -0.2125, -0.1419, -0.0979, -0.1621, 0.7013, 1.1986, 0.0061, -1.3128, -0.0436, -0.9271, 0.2984, 0.4674, 0.1114, -1.355, -2.7469, -1.1307, -0.1063, 0.6844, -0.1321, 0.2951, 3.132, 0.0, 0.0, 3.4424, -1.5171, 0.0648, -1.7551, 1.2149, 0.1817, 2.9693, -3.6515, -0.6174, -1.0346, -0.1293},
    {0.0, 0.5636, -0.3027, -0.4185, 0.1014, 0.2348, 0.0, 0.0, 0.0, 0.0, 0.5529, -1.2313, -0.5003, 0.0, 0.3313, -2.9867, -0.25, 0.0, 0.0, -0.2038, 0.237, -1.0684, 0.0, 0.4816, 0.0, -0.5602, 0.0, -0.1134, 0.0, 0.0, 0.7783, 0.0, 0.0, 5.529, -0.1798, 0.0, -0.1576, 0.0, 0.3502, -1.038, 0.0, 0.0355, 0.2606, 0.1354, -0.1766, 0.6784, -1.8877, 0.3463, 0.0, -0.2893},
    {1.9949, 1.7343, 0.2938, 0.58, 0.1308, 0.0, 0.0, 0.0, 0.0, 0.3743, 1.0954, -1.5163, 0.0, 0.0, 0.8445, 0.1812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0439, 0.0, 0.0, 0.2263, 0.0, 0.0, 0.0, -0.2024, 0.9134, 1.7458, 0.0, 0.8923, -0.271, 0.0, 0.4327, 0.0, 1.0928, 3.0768, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7443, 1.634, 0.325, 0.0, -0.5982},
    {0.0, 0.0, 0.0, 0.2766, 0.0671, 0.0, 0.0, -0.3439, 0.1797, 0.0, 0.0, 0.0, 0.4189, 0.0, 0.5863, 0.0, 0.0, 0.1876, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2022, 0.0, 0.0, 0.3835, 0.0849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2662, -0.3994, 0.0, 0.0278, -0.198, 0.0, 0.0, -0.5825, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -2.0695, 0.1333, 0.0, 0.0, 0.0, 0.4183, 0.0, 0.0, 0.0, -0.4647, 0.0, -1.4456, 0.0, 0.0, 0.0789, 0.0, 0.0, 0.1495, -0.9699, 0.0, -1.8555, 0.0, 0.0, -0.4009, -0.2397, 0.2565, 0.0, 0.0, -0.2904, 0.0, 0.0, -0.2157, 0.0, 0.0, 0.0, 0.0, -0.6926, 0.0, 0.0, 0.6649, 1.149, 0.0, -1.2888, 0.0, 0.1914, 2.0698, 0.0},
    {0.0, 0.0, 0.0, -0.1131, -0.3784, 0.0, 0.0, -0.3661, -1.9007, 0.0, 0.0, 0.0, -0.2869, 0.0, -0.3013, 0.0, 0.0, -0.2476, 0.0, -0.461, 0.0, -0.0942, -0.0098, 0.0, 0.0, 0.0, -0.3702, 0.1757, 0.0, 0.0, 0.5727, -0.3497, 0.0, 0.0, 0.2045, 0.0, 0.0, 0.0, -0.1618, -0.7675, 0.0, -0.0438, 0.0, 0.0, 0.3108, 0.4206, 0.0, 0.0754, 0.1433, 0.0},
    {0.0, 0.0, -0.7927, -0.5622, 0.0, -0.4424, 0.0, -0.5088, 0.0, 0.0, 0.6874, 0.0, -0.3851, 0.0, 0.0, 0.2594, 0.0, -0.2359, 0.0, -0.2191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2245, -0.1122, 0.0, -0.3077, 0.3855, 0.7238, 0.0, -2.3278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6638, 0.7364, 0.0223, -0.4186, 0.1268, -0.1423, -2.1559, 0.0, -0.1757, 0.0, 0.0},
    {0.0, 0.951, -0.7661, 0.0, -0.5943, -0.7471, -0.7075, -1.8064, -0.3987, -1.0245, 0.7467, -0.9027, -0.5087, -0.0326, 0.9814, 0.0868, -0.3453, -0.5893, 0.0989, -0.8577, -0.7146, -0.337, 0.0158, -0.6558, 0.0612, -0.3978, -0.8328, -0.5129, -1.1443, -1.0524, 0.3104, 0.4398, -1.3637, -0.7462, -1.0499, 0.3997, -0.6888, 0.2118, 0.0, 0.3596, 0.2645, -0.0626, -1.5008, -0.8572, -0.3798, -2.1123, 0.4072, -1.2787, -1.2623, -0.7251},
    {52.2027, 46.3507, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.274, 0.0, 0.0, 26.8688, 43.3862, 24.1766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -116.9622, 0.0, -29.4292, 0.0, 0.0, 0.0, 0.0, 0.0, 54.7589, 24.8832, 0.0, 0.0, 0.0, 89.1627, 0.0, 0.0, 51.6749, 40.113, 0.0, 24.3185, 0.0, 0.0, 0.0, 37.0714, 47.2854, 0.0, 0.0, 0.0},
    {-3.1615, 4.1603, 0.3292, 0.0, -0.3803, 1.7518, -0.5171, 0.6846, -2.4278, -0.5259, 0.0, 0.0, -1.2741, -0.0547, -1.0013, 0.0, 0.1838, -0.8806, 0.0, 0.2134, -0.3196, -0.216, 0.0117, 0.0, 0.0, -3.1067, -1.0158, -0.4481, -1.1674, -0.8586, 0.3081, 3.0239, -0.422, 0.0, 0.3001, -0.8993, 2.7975, 0.2341, -0.984, 0.8965, 0.0, -0.1231, 0.4614, 0.9908, -0.3004, 7.4954, -1.0581, -0.5725, 2.6781, 0.6524},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -12.6587, 0.0, 1.7353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0774, 0.0, 0.0, 0.0, -2.2817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.173, -0.1976, 0.3617, 0.3409, 0.2197, 0.0, 0.0, 0.0, 0.0, -0.0424, 0.4297, -0.1282, 0.0, 0.224, 0.0698, 0.0, 0.0, 0.2212, 0.0, 0.0, -0.0394, 0.5377, 0.2563, 0.2563, 0.2143, -0.2555, 0.0, 1.181, 0.0, 0.2754, 0.0, 0.0, 0.3447, 0.0, 1.1361, 0.6198, 0.2852, -0.0377, 0.1742, 0.2192, 0.3022, 0.7584, 0.8604, -0.1314, 0.0, 0.0},
    {0.0, -0.8576, -0.1736, -0.0996, 0.0, 0.3031, 0.0, 0.0, 0.1063, 0.0, 0.0, -0.4768, 0.1726, 0.0, -0.2384, -0.1726, -0.2262, 0.0, 0.0, -0.1749, -0.1124, 0.0, 0.0107, 0.2219, 0.0, -0.2267, 0.0, 0.0, 0.0, 0.0, -0.3632, -0.2974, 0.0, -0.2197, 0.0964, 0.0, -0.2792, 0.0, 0.0, -0.6023, -0.4197, 0.0131, 0.0, -0.0744, -0.1134, 0.0, 0.5545, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.5814, 0.0, 0.0, 0.0, 0.0, 0.367, 0.0, 0.3037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0868, 0.0, 0.0, 0.5036, -1.1583, 0.0, 2.0209, 0.0, 0.0, 0.432, 0.1249, 0.0, 0.0, 1.0091, -0.3362, 0.0, 0.0, -0.0638, 0.0, 0.0, 0.0, 0.6135, -2.5313, 0.0, -0.0232, 1.3476, 0.6837, 0.0, 1.1821, 0.0, 0.1761, 1.4199, 0.0},
    {0.0, -0.4346, -0.1248, -0.0798, 0.0, 0.1048, 0.0, -0.1461, 0.1167, 0.0, 0.0, 0.0, 0.1236, 0.0246, -0.5458, -0.0844, 0.0904, -0.0562, 0.0, -0.1221, 0.0, 0.0645, 0.0, 0.0, 0.0402, 0.139, 0.0, 0.0, -0.1053, 0.0, -0.6402, -0.5752, 0.0, 0.3346, 0.0603, -0.3175, 0.0, 0.1433, -0.5726, -0.1617, 0.2195, -0.0099, 0.1542, 0.0, -0.1109, -0.3555, -0.2838, 0.0, 0.0, -0.1082},
    {0.0, 0.5482, -0.3795, -0.6437, -0.4316, 0.0, 0.0, -1.6002, -0.2228, 0.0, 0.4903, 2.3853, -0.4056, 0.0, 0.3625, 0.4706, 0.3858, -0.3714, 0.0, -0.6665, -0.7357, 1.2232, 0.0367, -0.6983, 0.0, 0.0566, -0.5068, 0.0, 0.122, -1.3834, 0.8567, -1.2469, 0.0, 0.9753, -1.7528, 0.0, 0.0, 0.0, 0.2531, 0.0, -3.6248, 0.0279, -3.6707, -0.2027, -0.1611, 0.0, 1.4986, -0.7721, -0.7478, -0.1683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0883, 0.0, -0.424, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.7519, -2.0603, -0.5282, -0.3451, 0.1327, 0.5354, 0.2029, -0.5221, 0.0, 0.2509, 1.5351, 0.751, 0.0, 0.0, -1.3687, -0.4444, 0.0, 0.0, -0.2227, -0.3641, -0.5155, 0.0, -0.0306, 0.4909, 0.199, 0.0, 0.0, -0.1361, 0.0, 0.0, -0.9925, 0.0, 0.0, 0.0, 0.0, 1.067, 0.0, 0.4866, -1.2689, 0.0, 1.3612, -0.0311, 0.0, -0.4846, 0.4336, -1.6192, 0.0, 0.0, -0.7804, -0.4024},
    {0.0, 1.0316, 0.0, -0.2972, -0.0864, 0.2599, 0.0, 0.0, 0.0913, 0.0, 0.2177, 0.3629, 0.0, 0.0, 0.0, -0.2347, -0.0919, 0.0, 0.0, -0.1752, 0.0, -0.0851, 0.0184, 0.0, 0.0, -0.6514, 0.1015, 0.0975, -0.1488, 0.0, -0.5198, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2725, 0.0, 0.0, -0.6944, 1.902, 0.0267, 0.2063, -0.2564, -0.0685, -1.6674, -2.5484, 0.0, 0.0, 0.0},
    {0.0, -0.6581, 1.7445, 0.7181, 0.8169, 0.6728, 0.822, 1.2337, 0.8683, 0.969, 0.0, 1.6531, 1.1775, 0.7814, 0.0, 0.9686, 0.9714, 0.5291, 0.7513, 1.2058, 1.6083, 0.6761, 0.9356, 1.1051, 0.9001, 0.6613, 0.6092, 0.8665, 1.1386, 0.9804, 0.0, -0.8868, 0.8732, 1.3665, 1.216, 0.0, 1.046, 1.0772, 0.0, -0.639, 0.7051, 1.1497, 1.5105, 0.968, 0.5607, 0.0, 1.5376, 0.8766, 0.0, 1.1122},
    {-0.8082, 0.0, 0.0, -0.1628, 0.0, 0.2464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4545, 0.0, 0.4425, 0.0, -0.1724, -0.3218, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.297, 0.0, 0.0, 0.0, 0.0, 0.5095, 0.0, 0.0, -0.3478, -0.8836, 0.0, 0.3385, 0.0, -0.5161, 0.0, 0.0261, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2881, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0645, 0.0, 0.6135, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2053, 0.0, 0.0, 0.0, 1.0438, 0.0, 0.0, 0.0, 0.0, 0.1603, 0.0, 0.453, 0.0, -0.6298, 0.0411, 0.0, 0.0, 0.0, 0.0, -0.0961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1247, 0.0, 0.0, 0.0, -0.433, 0.0, 0.0, 0.0356, 0.2465, 0.1347, 0.0, 0.7007, 0.0, 0.1616, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.1962, 1.3727, 0.0, 0.319, 0.6849, 0.0, 0.1672, -0.1571, 0.0, 0.7679, 2.905, -0.5013, 0.0, -0.3651, -0.4861, 0.1775, -0.107, 0.0, 0.5276, 0.0, -0.5939, 0.0189, -0.8939, 0.0, -0.1633, -0.3901, -0.3859, -0.2181, -0.1933, -0.9072, 0.7383, 0.0, -0.2677, 0.0, 0.0, -0.7185, 0.0, 0.0, 1.0142, -2.9799, 0.0369, 0.0, -0.3219, -0.3289, -1.3421, 0.0, 0.1661, 0.0, -0.1424},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2751, 0.0, 0.0, 0.0, 0.0, -0.058, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2385, 0.0, 0.0, 0.3241, 0.0, 0.0, 0.4547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0987, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.0405, 0.0, -1.9742, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.059, 0.0, 0.0, 0.0, 1.0826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0283, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0927, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0161, -0.1417, 0.0, 0.0, 0.2066, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1008, 0.0, 0.0, 0.0, 0.0, 1.1569, 0.0, 0.0449, -0.0752, -0.1668, 0.0, 0.0, 0.0, 0.0, 0.5682, 0.0},
    {2.8235, -2.8002, -2.9224, 2.257, 0.2926, 0.0, -0.1779, 0.7813, 1.312, 0.1042, 4.4549, 2.16, 1.009, -0.1046, 1.3117, 1.5574, 0.6132, 0.8272, 0.1043, -0.2796, 0.3225, 2.7213, -0.2159, 1.3534, -0.0571, 2.3785, 0.9566, 0.4512, 1.6533, -2.0361, 3.7222, 2.6819, 2.0151, -5.301, -1.6196, -0.4396, -0.5805, 1.3205, 3.8555, 1.1286, -1.6379, 0.2662, 0.6525, 0.6313, 0.5251, 3.7456, 12.6133, 0.8715, 1.3114, 0.7911},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.3703, 0.0, -1.2427, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2093, 0.0, 0.0, 0.0, -3.3469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.2262, 0.2896, 0.0, -0.1011, 0.0, -0.089, 0.0611, -0.1473, 0.0, 0.0, 0.0, -0.2676, -0.2541, 0.0, 1.0819, 0.0928, 0.0, -0.1518, 0.0, 0.1382, 0.1083, 0.0795, 0.0, 0.0, 0.0234, -0.1167, 0.0942, -0.1612, 0.1762, -0.3793, 0.2926, 0.2843, 0.0, -0.2033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2327, -0.087, -0.013, 0.1272, 0.2261, 0.0, -0.7456, 0.3626, 0.0, 0.0, 0.0},
    {-0.336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1838, 0.1391, 0.0, 0.0, -0.2763, 0.0, 0.0, 0.0, 0.0, 0.1141, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0097, -0.0997, 0.0, 0.1041, 0.0912, 0.0, 0.0, 0.0, 0.0, 0.2488, 0.0, 0.1171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1131, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3662, 0.0, 0.0, 0.183},
    {2.393, 1.7196, -1.1968, -2.9977, -2.2399, 0.0, -2.104, 0.5446, -2.0866, -0.6475, -1.0963, 0.0, 0.0, -0.1645, -1.1634, 0.4923, -2.8342, -2.6126, 0.0, 0.636, 0.0, -2.6724, 0.2254, 1.2736, 0.1552, -2.9775, -2.3633, -2.5069, -1.3152, 0.0, 0.0, 0.0, -0.9905, -1.0107, 0.0, 0.0, -2.7278, 1.6242, 1.7071, 1.1891, -1.9874, 0.0, 0.0, -0.7076, -1.7022, 0.0, 0.0, -0.5721, -0.8095, -1.7795},
    {-20.5194, -19.8778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -12.233, 0.0, 0.0, 0.0, -16.9421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 70.9135, 0.0, 22.4215, 0.0, 0.0, 0.0, 0.0, 0.0, -22.0866, -9.1787, 0.0, 0.0, 0.0, -40.3586, 0.0, 0.0, -22.5712, -16.2427, 0.0, -10.5314, 0.0, 0.0, 0.0, -11.686, -20.4787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2774, 0.0, 0.0, 0.0, 0.0, -0.051, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2281, 0.0, 0.0, -0.3241, 0.0, 0.0, -0.4522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.4031, 0.0, 0.1172, -0.1704, -0.155, 0.0, 0.0, -0.3135, 0.0, 0.0, -0.6772, -0.4878, -0.3981, 0.0, 0.6773, 0.1191, 0.0, -0.1508, 0.1015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1226, -0.2628, -0.1788, -0.1279, -0.4485, -0.634, -0.4517, -0.2481, -0.3498, 0.0, 0.0, 0.1582, -0.3945, -0.2352, 0.0, -0.2919, 0.0542, 0.0, 0.1318, -0.1711, -0.9923, 0.0, -0.1474, 0.0, -0.1407},
    {0.0, 0.0, 0.0, 0.4913, 0.1324, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0021, 0.0, 0.6003, 0.0, 0.0, 0.3622, 0.0, 0.1598, 0.0, 0.4286, 0.0, -0.3029, 0.0, 0.0, 0.2753, 0.0643, 0.0, 0.0, 0.0, 0.5838, 0.0, 0.0, -0.0754, 0.0, 0.0, 0.0, 0.3469, 1.2148, 0.0, 0.0271, 0.0, -0.6022, 0.0, 0.606, 0.0, 0.2272, -0.2956, 0.1671},
    {2.4516, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5052, -2.4158, 0.0, 0.0, -1.1816, 0.0, 0.4542, 0.0, 0.0, 0.0, 0.0, -0.339, 0.0476, 0.9525, 0.0, 0.0, 0.0, -0.5621, 0.0, 0.0, 0.0, 0.0, -0.8168, 1.2323, -0.8106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1637, 0.0, -0.7784, -0.875, 2.3436, 0.0, -0.7137, 0.0, 0.0},
    {0.0, 0.9356, 1.4286, 0.3766, 0.1509, 0.0, 0.0, 0.3704, 0.0, 0.0, 0.3391, 0.0, -0.1509, 0.0, -0.5966, -0.5575, 0.6738, 0.0, 0.0, 0.5458, 0.1538, 0.2465, 0.0, -1.0581, 0.0, 0.0, -0.3575, -0.226, 0.0, 0.0, -0.4255, 0.6584, 0.0, 0.3795, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5092, -1.4467, 0.0, -0.1077, -0.2438, 0.0, -1.4239, 0.0, 0.2273, 0.0, 0.0},
    {1.8255, -3.5154, -3.1859, 0.0, -0.7192, 0.1793, -0.7364, 1.6398, 0.0, 0.9732, 2.5688, 0.0, 2.6151, 0.0, 0.6573, 0.0, 0.2359, -0.5228, 0.0, 0.7683, -0.4836, 2.0535, 0.0975, 2.3318, 0.0, 1.0592, 0.2665, -0.8779, 1.4309, 0.0, 0.6725, 0.5675, 1.3919, 0.0, 0.1692, 0.3162, -2.1833, 0.0, 4.2734, 0.0, 0.0, 0.1104, 1.6868, -0.2084, -0.2079, 0.0, 9.8852, 2.2787, 0.0, -0.2525},
    {0.9395, 1.5341, 0.0, 0.4368, 0.0, 0.4111, -0.1903, 0.2561, -0.3534, 0.3618, 1.0317, 0.827, 0.0, 0.1949, 0.0, 0.2962, 0.0, 0.0, 0.2999, 0.2954, 0.3243, 0.0, 0.0593, 0.2566, 0.0996, 0.0, -0.3087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3297, -0.7356, 0.0, -0.7506, 0.2716, 0.2226, -0.5994, 0.0, 0.0, 0.1431, -0.2693, 0.4838, 0.0, 1.1097, 0.0, 0.0, 0.0, 0.6079},
    {0.0, 0.0, 0.0, 0.0, 0.5146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2084, 0.0, 0.0, 0.2559, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0893, 0.0, 0.0, 0.4272, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.576, -0.1766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.172, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -2.5583, -1.4745, 3.7276, 0.8254, 0.0, 0.0, -1.3636, 1.3005, 0.0, -4.5437, 0.0, -1.8022, 0.0, -2.9118, 4.5512, -0.3605, 0.4618, 0.0538, -0.3463, -1.2393, -2.0737, -0.184, 11.219, -0.0683, 1.5316, 0.0, 1.0309, -0.7825, -2.2245, -1.104, -6.9584, -1.0857, 7.1154, -2.0255, -0.5769, -2.1551, -0.1452, -5.1553, -6.5619, -17.8162, 0.0316, -2.7944, -1.2893, -0.6798, 41.7115, 3.156, -2.7408, 0.0, -0.4431},
    {0.0, 2.037, 2.1506, 0.0, -0.0968, 1.9122, 0.0, 0.0, -0.3522, 0.0, -0.2391, 8.7037, -0.3222, 0.0, -1.0897, 5.0833, 0.2092, -0.3298, 0.0, -0.2655, 0.4508, -2.3468, 0.0, 2.5124, 0.0, -0.6838, 0.0, -0.4851, 0.2442, -2.2273, -0.945, -0.8724, 0.0, -6.6393, -0.29, 0.0, 1.4933, 0.0, 0.0, -3.9895, 5.7519, 0.0, 2.0997, 0.5069, 0.0991, 5.1981, -3.5041, 0.713, 1.2404, 0.559},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.2805, -0.812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3816, 0.0, 0.1269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.282, 0.9411, 0.2003, 0.1844, -0.1316, 0.0, 0.1259, 0.0, 0.1258, 0.1146, -0.4221, 0.7082, -0.1924, 0.0, 0.2404, 0.1171, 0.0, -0.0929, 0.0, 0.1087, 0.0, -0.0653, 0.0, 0.0, 0.0, 0.099, -0.1229, 0.0, 0.0, -0.2641, 0.2394, -0.2691, 0.1786, 0.0, 0.3339, 0.0, 0.4419, 0.0, 0.0, 0.0, -0.2451, 0.0, 0.1589, -0.1058, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.367, 0.1595, 0.0, 0.0, 0.0, 0.7928, 0.0, 0.0, 0.0, 0.0, 0.1504, 0.0, 0.2898, -0.3499, 0.0, -0.0532, 0.1103, 0.0, 0.0, 0.0, 0.2488, 0.1008, 0.0, -0.9887, 0.8865, 0.0, 0.0, -0.1091, 0.0, 0.0, 0.0, 0.0, 0.4213, 0.0, 0.0212, 0.4654, -0.489, 0.0, 0.9414, 0.0, 0.2313, -0.4434, 0.1449},
    {0.0, 2.1722, 1.9457, 0.9426, -0.1672, 1.7044, 0.0, -1.0884, -1.2844, 0.0, -0.8212, 0.0, -0.4305, 0.0, -1.5394, 2.444, -0.1795, -0.0781, 0.0, -1.0476, 0.7529, -1.8818, 0.0, 2.166, 0.0, -0.4406, -0.0871, -0.2501, 0.1895, -1.8852, -2.9167, -0.8612, 0.0, -20.0923, -0.4332, 0.0, 1.1196, 0.0, -0.596, -4.7661, -11.3877, 0.0149, 0.7848, 0.4124, -0.1254, 2.9441, -4.3767, 0.4121, 0.761, 0.672},
    {-0.2146, -0.6675, 0.0, -0.1208, 0.0447, 0.0, 0.0, -0.1599, -0.1966, 0.1445, -0.6693, 0.7111, 0.0, -0.0266, -0.6546, 0.1079, -0.0745, 0.0, 0.0, -0.0768, -0.1247, -0.0396, -0.0211, -0.25, -0.0199, 0.106, 0.0615, -0.1471, -0.1762, -0.0693, 0.0, -0.3957, 0.0, 0.0, 0.0, -0.9961, -0.394, -0.0856, -0.4559, -0.7398, 1.0143, -0.3757, 0.0, -0.2024, -0.1293, 0.0, -0.7355, -0.058, -0.3542, -0.125},
    {0.3105, 0.0, 0.4404, 0.0, -0.1107, 0.0, 0.0, 0.0, 0.0, 0.1612, 0.1773, 0.0, 0.0, 0.0409, -0.2781, -0.0993, 0.0, 0.0, 0.0, 0.0, 0.3072, 0.0, -0.0216, -0.2322, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2609, 0.3557, 0.0, -0.1488, 0.0, 0.1356, 0.5604, 0.2017, 0.1356, 0.3242, 0.2973, 0.1727, 0.0237, 0.1768, 0.1905, 0.0, 0.0, 0.0, -0.1323, 0.0, 0.2577},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1.858, 2.3727, 0.558, 0.569, 0.0, -0.3559, -0.264, 0.471, -0.1938, 0.2881, 0.0, 0.0, 0.0, 0.0, 1.8747, 0.3024, 0.322, 0.0, 0.2587, 0.309, 0.3044, -0.1615, 0.0533, -0.4819, -0.1482, 0.0, 0.0, 0.0, 0.0, -0.1949, 1.8625, 1.2487, 0.0, -0.5293, 0.0, 0.0, 0.0, 0.0, 1.8791, 1.2246, -1.3377, 0.0, 0.0, 0.19, -0.5095, 1.973, 0.9447, 0.0, 1.1538, 0.5344},
    {0.0, 0.0, 0.0, -0.2884, 0.0806, 0.0, 0.0, 0.0, -0.1737, 0.0, 0.5889, 0.0, 0.0, 0.0, 1.8532, 0.0, 0.0, 0.2317, 0.0, -0.1276, 0.0, 0.1016, 0.0, 0.444, 0.0, 0.0, 0.6612, 0.1805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1405, 0.0, 0.0, 0.0, 0.0, -0.2934, 0.0, 0.0, 0.0, 0.5318, 0.1253, 0.0, 0.0, 0.0, -0.241, 0.0},
    {0.0, 0.0, 0.0, -1.4386, 0.2138, 0.0, 0.0, 0.0, 0.3134, 0.0, 0.2084, 0.0, -0.4472, 0.0, -0.5202, 0.0, 0.0, 0.2379, 0.0, 0.0, 0.2047, -0.6788, 0.0151, -1.1368, 0.0, 0.0, 0.1599, -0.1335, 0.2225, 0.0, 0.2303, 0.0, 0.0, 0.0, -0.152, 0.0, 0.0, 0.0, 0.5496, -0.5941, 0.0, 0.0147, 0.9744, 0.8466, 0.0, -1.0489, 0.0, 0.1914, 1.4674, 0.0},
    {3.8486, 2.5914, 0.0, -0.8619, 0.0, 0.0, -0.5864, -0.4299, 0.0, 1.1251, 1.4548, 0.0, 0.0, 0.0, 0.0, 0.4407, 0.0, 0.0, 0.0, 0.0, -1.0783, -0.401, -0.0479, 0.0, -0.1437, 0.5005, -0.4446, 0.3485, 0.0, 0.5495, 3.0604, 2.5714, 0.0, 0.0, -0.306, 1.3441, -0.4008, 0.6326, 3.7835, 2.4552, -2.0194, 0.2476, 0.5693, 0.0, 0.0, 3.6558, 3.9387, -0.4139, 0.0, 0.0},
    {4.3817, 5.1684, 0.1233, -0.3219, 0.0, 0.0, 0.0, 0.1092, -0.2426, 0.589, 3.4735, 0.0, 0.2887, 0.0303, 3.9645, 0.0, -0.1215, 0.0, 0.0, 0.2129, -0.3471, 0.0536, 0.013, 0.0, 0.0, 0.0, 0.0, 0.0, -0.614, 0.1111, 4.6226, 4.2184, -0.478, 0.4313, 0.1169, 2.4283, -0.4119, -0.1742, 3.6485, 4.2442, -0.3955, 0.1761, 0.2117, -0.2262, -0.1907, 4.9892, 3.9421, 0.0, -0.6878, -0.3202},
    {0.0, -0.6769, 0.0, 0.0, -1.1264, 1.2692, -0.5082, -0.6707, 0.0, -0.2048, -0.6064, -1.9528, 0.3763, 0.2194, -1.2969, 0.0, -0.8943, -0.3263, 0.0, -0.5406, -1.1398, -0.4207, 0.0688, 0.2717, 0.0, 0.0, -0.9588, -0.5131, -1.693, -0.2708, 0.0, -1.9164, -1.1356, -0.5006, 0.18, 0.0, 0.0, -1.0944, -0.908, -1.0212, -1.4647, 0.0755, -0.3395, -0.6798, -0.3453, -2.504, -1.0815, 0.0, -0.8664, -0.8303},
    {-1.6356, -2.8508, 0.1795, -0.6865, -0.4359, 0.9744, -0.391, 1.0737, -0.2654, 0.7657, -1.2103, -1.0716, 0.7817, 0.0769, -1.4445, 0.0, -0.6529, -0.4308, -0.9255, 0.9086, -0.1722, -0.4807, 0.0567, 0.7587, 0.0593, -0.9094, -0.1105, -0.4469, -0.2188, 0.5115, -0.9692, -1.2387, 0.0, 1.0871, 0.5742, -1.6632, -0.8478, -0.3261, -1.646, -1.4087, -0.5934, -0.0353, 0.895, 0.0, 0.0866, -1.1555, -2.8678, 0.775, 0.0, -0.1472},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -17.0004, 0.0, 1.2988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06, 0.0, 0.0, 0.0, 1.4989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0385, 0.0, 0.0, 0.0, 0.0, -0.1045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2792, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1465, 0.0, -0.118},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0746, 0.0, -0.2667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2113, 0.1858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5765, 0.0, 0.8205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.3277, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.2031, 0.1633, 0.0, 0.0, 0.3807, 0.2649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.418, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1856, -0.3393, 0.0, 0.0, 0.0, 0.0, 0.3265, 0.0661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1096, 0.0, 0.0, 0.0, 0.0, 1.6172, 0.0, 0.038, 0.1145, 0.0, 0.0, 0.7315, 0.0, 0.145, 1.0702, 0.0},
    {0.0, 0.0, 0.0, -0.7597, 0.0, 0.0, 0.0, 0.283, 0.4961, 0.0, 0.5611, 0.0, -0.9769, 0.0, -0.4521, 0.0, 0.0, -0.3622, 0.0, 0.0, 0.2636, -0.9674, 0.0, 1.5694, 0.0, 0.0, -0.6899, -0.1458, 0.0, 0.0, 0.0, -0.2214, 0.0, 0.0, -0.3061, 0.0, 0.0, 0.0, 0.6605, -2.0501, 0.0, -0.038, 1.1242, 0.4261, 0.0, 1.6453, 0.0, 0.0, 1.299, 0.0},
    {0.0, 2.1852, -0.4326, 0.0, -0.0985, -0.4842, 0.0, -0.1815, -0.4424, 0.0, 0.0, 2.6796, -0.3306, 0.0, -0.8177, 0.9421, 0.0, -0.0748, 0.0, 0.1318, 0.1873, 0.0, -0.0277, 0.5386, 0.0, -0.4729, -0.36, 0.0, -0.1132, 0.112, 0.458, 0.0, 0.0, 2.9266, 0.0, 0.0, 0.4535, 0.0, 0.0, 0.0, 4.5668, -0.0411, -0.2572, 0.0653, -0.2341, 0.0, 0.0, -0.1403, 0.0, -0.1168},
    {0.0, 0.4583, 0.0, 0.0, 0.0, -0.1474, 0.0, 0.176, -0.1102, 0.3653, 0.8321, 0.4908, 0.1834, 0.0645, 0.3829, 0.1308, -0.2527, 0.0, 0.0, 0.1696, 0.0, 0.0, 0.026, 0.1661, 0.0758, 0.4401, 0.2468, 0.0, 0.1604, 0.0, 0.0, 0.654, -0.2255, 0.0, 0.0, 0.0, 0.0, 0.1364, 0.4945, 0.7438, -0.8512, 0.0, 0.0, 0.0, 0.2466, 0.5899, 1.4968, 0.0, 0.0, 0.1943},
    {0.0, 0.4013, 1.075, 0.2962, -0.2807, 0.1696, -0.1443, -0.3359, 0.0, -0.4204, 0.578, 0.9714, -0.2601, 0.0, 0.3334, -0.3517, 0.9088, 0.0788, 0.0, -0.2208, 0.6327, -0.0789, -0.0617, -0.1374, 0.0432, 0.0, -0.3456, -0.0845, 0.8721, -0.2173, 0.0, 0.3748, 0.7438, 2.1625, -0.3622, 0.0, 0.1507, 1.0569, 0.0, 0.0, -0.7695, -0.0271, -0.5219, 0.9548, 1.0217, 1.2793, 0.4534, -0.4791, 1.0717, 0.9684},
    {0.0, 0.0, 0.0, 0.2348, -0.1148, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1149, 0.0, 0.0, 0.0, 0.0931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1845, 0.0, 0.0, 0.0, 0.4536, -0.7301, 0.0, 0.0, 0.2804, -0.2215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-3.7035, 6.431, 0.9879, 1.0611, 0.2581, 2.937, 0.3714, 0.4128, -0.9369, -0.7572, 0.7555, 3.8029, -0.6091, -0.0411, -1.3759, -0.2875, 0.7796, 0.1872, 0.0, -0.1134, 0.0, 1.3794, -0.0799, 0.567, 0.0362, -1.491, -0.5365, 0.7443, -0.7882, 0.0, -0.4973, 1.8467, -1.0363, 0.2503, 0.1097, 0.0, 4.5882, 0.2904, -1.1512, -1.3646, -1.1749, -0.1904, 0.322, 0.9216, 0.431, 3.7116, 0.0, -0.9274, 2.0261, 0.9332},
    {0.0, 0.0, -0.2897, 0.3708, -0.2618, -0.4039, 0.0, 0.0, -0.205, 0.0, 0.4873, 1.2997, -0.4009, 0.0, -1.0526, -0.1774, -0.2364, -0.2209, -0.4118, 0.0, 0.0, -0.3895, -0.0219, -0.312, 0.1256, -0.3857, -0.4527, -0.799, 0.2834, 0.0, 0.0, -1.5759, 0.3718, -0.3007, 0.2718, -1.0096, 0.0, -0.4443, 0.0, 0.9837, 0.5531, -0.0683, -0.7808, 0.2292, -0.283, 0.0, 1.0804, 0.0, 0.0, -0.4601},
    {0.0, 0.0, 0.0, 0.0, 0.2721, -0.8853, 0.3982, 0.0, -0.3691, 0.0, 1.0354, 1.524, 0.0, -0.1995, -1.2004, 0.0, 0.4329, 0.0, 0.0, 0.0, 0.5424, 0.5686, -0.039, 0.0, 0.0, 0.0, 0.4129, 0.0, 1.2466, 0.0, 0.0, 0.955, 1.2254, 1.3752, 0.0, 1.3555, 0.0, 0.0, 0.0, 0.9968, 1.5304, 0.0, 0.0, 0.4389, -0.3711, 0.0, 0.0, 0.0, 1.173, 0.5683},
    {0.0, 1.1602, -0.1656, 0.4449, 0.2361, -0.2917, 0.0, 0.1397, -0.0862, 0.0, 0.0, 0.0, 0.2834, 0.0, -0.2935, 0.0, 0.0, -0.1148, 0.0, 0.2577, -0.3044, -0.3473, 0.0164, 0.0, 0.0, -0.1391, -0.4262, -0.1825, -0.2087, 0.0, -0.2478, 0.6095, 0.0, 0.0, 0.0985, 0.0, 0.0, 0.0, -0.2997, 1.0528, 0.2669, 0.0, 0.3587, -0.1015, 0.2617, 0.5267, 0.0, 0.0, 0.0, 0.0}
    };

    public ProteinPredictor(Polymer polymer) throws InvalidMoleculeException {
        this.polymer = polymer;
        hBondMapH = setupHBondMap("H");
        eShiftMapH = setupEShiftMap("H");
        hBondMapHA = setupHBondMap("HA");
        eShiftMapHA = setupEShiftMap("HA");
        lcmbMap = setupLCMBMap();
        initAAMap();
        initAttrNames();
    }

    private double getProperty(int property, int res) {
        Residue residue = polymer.getResidue(String.valueOf(res));
        if ((residue == null) || (property == DISULFIDE)) {
            return 0.0;
        }
        String resName = residue.getName();
        int resIndex = residueNames.get(resName);
        return properties[resIndex][property];
    }

    boolean checkAngles(Double... angles) {
        boolean ok = true;
        for (Double angle : angles) {
            if (angle == null) {
                ok = false;
                break;
            }
        }
        return ok;
    }

    double isResidue(String resName, int iRes) {
        Residue residue = polymer.getResidue(String.valueOf(iRes));
        if (residue.getName().toUpperCase().equals(resName)) {
            return 1.0;
        } else {
            return 0.0;
        }
    }

    private Map<String, HydrogenBond> setupHBondMap(String aName) throws InvalidMoleculeException {
        Molecule molecule = polymer.molecule;
        MolFilter hydrogenFilter = new MolFilter("*." + aName);
        MolFilter acceptorFilter = new MolFilter("*.O*");
        Map<String, HydrogenBond> hBondMap = molecule.hydrogenBondMap(hydrogenFilter, acceptorFilter, 0);
        return hBondMap;
    }

    private Map<String, Double> setupEShiftMap(String aName) throws InvalidMoleculeException {
        Molecule molecule = polymer.molecule;
        MolFilter hydrogenFilter = new MolFilter("*." + aName);
        if (aName.equals(".HA")) {
            hydrogenFilter = new MolFilter("*." + aName + "*");
        }
        MolFilter sourceFilter = new MolFilter("*.O*,N,H");
        Map<String, Double> eShiftMap = molecule.electroStaticShiftMap(hydrogenFilter, sourceFilter, 0);
        return eShiftMap;
    }

    private Map<String, Double> setupLCMBMap() {
        Molecule molecule = polymer.molecule;
        return molecule.calcLCMB(0, true, true);
    }

    private static double calcHBondShift(Map<String, HydrogenBond> hBondMap, Atom atom, double power) {
        HydrogenBond hBond = hBondMap.get(atom.getFullName());
        double shift = 0.0;
        if (hBond != null) {
            shift = hBond.getShift(0, power);
        }
        return shift;
    }

    private static double calcEInteractionShift(Map<String, Double> eShiftMap, Atom atom) {
        double shift = 0.0;
        Double shiftDouble = eShiftMap.get(atom.getFullName());
        if (shiftDouble != null) {
            shift = shiftDouble;
        }
        return shift;
    }

    public double calcRingShift(Atom atom) {
        Molecule molecule = polymer.molecule;
        SpatialSet spSet = atom.spatialSet;
        RingCurrentShift ringShifts = new RingCurrentShift();
        ringShifts.makeRingList(molecule);
        int iStruct = 0;
        double shift = ringShifts.calcRingContributions(spSet, iStruct, 1.0);
        return shift;
    }

    public double calcLCMB(Atom atom) {
        double lcmbValue = 0.0;
        Double lcmbDouble = lcmbMap.get(atom.getFullName());
        if (lcmbDouble != null) {
            lcmbValue = lcmbDouble;
        }
        return lcmbValue;
    }

    public Double predict(Atom atom, boolean explain) {
        Residue residue = (Residue) atom.entity;
        Double psiP = null;
        Double phiS = null;
        if (residue.previous != null) {
            psiP = residue.previous.calcPsi();
        }
        Double phi = residue.calcPhi();
        Double psi = residue.calcPsi();
        Double chi = residue.calcChi();
        Double chi2 = residue.calcChi2();
        if (residue.next != null) {
            phiS = residue.next.calcPsi();
        }
        double[] attributes = new double[attrNames.size()];
        int r = Integer.parseInt(residue.getNumber());
        genAttributes(attributes, r, psiP, phi, psi, phiS, chi, chi2, atom, true, true);
        String resName = residue.getName();
        if (atom.name.equals("HA3")) {
            resName += "3";
        }
        Integer column = aaMap.get(atom.name + "_" + resName);
        double sum = 0.0;
        if (column == null) {
            return null;
        } else {
            for (int i = 0; i < attributes.length; i++) {
                double value = attributes[i] * values[i][column];
                sum += value;
                if (explain) {
                    System.out.printf("%8.3f %8.3f %8.3f %8.3f %s\n", attributes[i], values[i][column], value, sum, attrNames.get(i));
                }
            }
        }
        return sum;
    }

    private void initAAMap() {
        aaMap.put("N_ALA", 0);
        aaMap.put("N_VAL", 1);
        aaMap.put("C_THR", 2);
        aaMap.put("CA_ILE", 3);
        aaMap.put("CA_ASP", 4);
        aaMap.put("CA_ASN", 4);
        aaMap.put("CB_THR", 5);
        aaMap.put("CA_ALA", 6);
        aaMap.put("CB_HIS", 7);
        aaMap.put("CB_TRP", 7);
        aaMap.put("CB_PHE", 7);
        aaMap.put("CB_TYR", 7);
        aaMap.put("CA_HIS", 8);
        aaMap.put("CA_TRP", 8);
        aaMap.put("CA_PHE", 8);
        aaMap.put("CA_TYR", 8);
        aaMap.put("CB_ALA", 9);
        aaMap.put("N_ASP", 10);
        aaMap.put("N_ASN", 10);
        aaMap.put("C_PRO", 11);
        aaMap.put("CB_SER", 12);
        aaMap.put("CB_CYS", 12);
        aaMap.put("CB_MET", 12);
        aaMap.put("HA2_GLY", 13);
        aaMap.put("N_SER", 14);
        aaMap.put("N_CYS", 14);
        aaMap.put("N_MET", 14);
        aaMap.put("HA_PRO", 15);
        aaMap.put("C_SER", 16);
        aaMap.put("C_CYS", 16);
        aaMap.put("CA_GLU", 17);
        aaMap.put("CA_GLN", 17);
        aaMap.put("CA_GLY", 18);
        aaMap.put("CB_ASP", 19);
        aaMap.put("CB_ASN", 19);
        aaMap.put("C_HIS", 20);
        aaMap.put("C_TRP", 20);
        aaMap.put("C_PHE", 20);
        aaMap.put("C_TYR", 20);
        aaMap.put("CA_LEU", 21);
        aaMap.put("HA_ASP", 22);
        aaMap.put("HA_ASN", 22);
        aaMap.put("HA_GLU", 22);
        aaMap.put("HA_GLN", 22);
        aaMap.put("HA_HIS", 22);
        aaMap.put("HA_TRP", 22);
        aaMap.put("HA_PHE", 22);
        aaMap.put("HA_TYR", 22);
        aaMap.put("HA_ALA", 22);
        aaMap.put("HA_ILE", 22);
        aaMap.put("HA_VAL", 22);
        aaMap.put("HA_LEU", 22);
        aaMap.put("HA_THR", 22);
        aaMap.put("HA_SER", 22);
        aaMap.put("HA_CYS", 22);
        aaMap.put("HA_ARG", 22);
        aaMap.put("HA_LYS", 22);
        aaMap.put("HA_MET", 22);
        aaMap.put("CB_ILE", 23);
        aaMap.put("HA3_GLY3", 24);
        aaMap.put("CA_THR", 25);
        aaMap.put("CA_SER", 26);
        aaMap.put("CA_CYS", 26);
        aaMap.put("CA_MET", 26);
        aaMap.put("CA_ARG", 27);
        aaMap.put("CA_LYS", 27);
        aaMap.put("C_GLU", 28);
        aaMap.put("C_GLN", 28);
        aaMap.put("CB_VAL", 29);
        aaMap.put("N_HIS", 30);
        aaMap.put("N_TRP", 30);
        aaMap.put("N_PHE", 30);
        aaMap.put("N_TYR", 30);
        aaMap.put("N_GLU", 31);
        aaMap.put("N_GLN", 31);
        aaMap.put("C_ALA", 32);
        aaMap.put("CB_PRO", 33);
        aaMap.put("CB_GLU", 34);
        aaMap.put("CB_GLN", 34);
        aaMap.put("N_GLY", 35);
        aaMap.put("CA_VAL", 36);
        aaMap.put("C_GLY", 37);
        aaMap.put("N_ARG", 38);
        aaMap.put("N_LYS", 38);
        aaMap.put("N_LEU", 39);
        aaMap.put("CA_PRO", 40);
        aaMap.put("H_ASP", 41);
        aaMap.put("H_ASN", 41);
        aaMap.put("H_GLU", 41);
        aaMap.put("H_GLN", 41);
        aaMap.put("H_HIS", 41);
        aaMap.put("H_TRP", 41);
        aaMap.put("H_PHE", 41);
        aaMap.put("H_TYR", 41);
        aaMap.put("H_ALA", 41);
        aaMap.put("H_GLY", 41);
        aaMap.put("H_ILE", 41);
        aaMap.put("H_VAL", 41);
        aaMap.put("H_LEU", 41);
        aaMap.put("H_THR", 41);
        aaMap.put("H_SER", 41);
        aaMap.put("H_CYS", 41);
        aaMap.put("H_ARG", 41);
        aaMap.put("H_LYS", 41);
        aaMap.put("H_MET", 41);
        aaMap.put("CB_LEU", 42);
        aaMap.put("C_ILE", 43);
        aaMap.put("C_VAL", 43);
        aaMap.put("C_LEU", 43);
        aaMap.put("C_ASP", 44);
        aaMap.put("C_ASN", 44);
        aaMap.put("N_ILE", 45);
        aaMap.put("N_THR", 46);
        aaMap.put("CB_ARG", 47);
        aaMap.put("CB_LYS", 47);
        aaMap.put("C_MET", 48);
        aaMap.put("C_ARG", 49);
        aaMap.put("C_LYS", 49);
    }

    private void initAttrNames() {
        attrNames.add("Math.cos(psi)*Math.cos(psiP)");
        attrNames.add("Math.cos(phi)*getProperty(HYDROPHOBICITY,r-1)");
        attrNames.add("getProperty(ASN,r)");
        attrNames.add("Math.cos(2*phi)");
        attrNames.add("Math.cos(3*psi)");
        attrNames.add("Math.sin(psi)*getProperty(CHARGE,r+1)");
        attrNames.add("1.0");
        attrNames.add("Math.cos(psi)*Math.cos(phi)");
        attrNames.add("Math.sin(phi)*Math.sin(chi)");
        attrNames.add("Math.cos(psi)");
        attrNames.add("Math.cos(phi)*getProperty(BULK,r-1)");
        attrNames.add("Math.cos(3*phi)");
        attrNames.add("getProperty(LYS,r)");
        attrNames.add("getProperty(TYR,r)");
        attrNames.add("Math.cos(psi)*Math.sin(phi)");
        attrNames.add("Math.cos(phi)*Math.cos(chi)");
        attrNames.add("Math.sin(phi)*getProperty(PROLINE,r-1)");
        attrNames.add("Math.sin(2*chi2)");
        attrNames.add("Math.sin(phi)*Math.sin(chi2)");
        attrNames.add("Math.cos(2*chi2)");
        attrNames.add("Math.cos(chi)*Math.cos(phiS)");
        attrNames.add("Math.sin(2*psi)");
        attrNames.add("hbond3");
        attrNames.add("Math.sin(psi)");
        attrNames.add("getProperty(MET,r)");
        attrNames.add("Math.cos(psi)*Math.cos(phiS)");
        attrNames.add("Math.cos(chi)*Math.cos(psiP)");
        attrNames.add("Math.sin(phi)*Math.cos(chi2)");
        attrNames.add("Math.sin(phi)*getProperty(HYDROPHOBICITY,r-1)");
        attrNames.add("Math.sin(chi)");
        attrNames.add("getProperty(ILE,r)");
        attrNames.add("getProperty(ALA,r)");
        attrNames.add("Math.sin(phi)*getProperty(BULK,r-1)");
        attrNames.add("Math.sin(2*chi)");
        attrNames.add("ringshift");
        attrNames.add("Math.cos(phi)*getProperty(CHARGE,r-1)");
        attrNames.add("getProperty(LEU,r)");
        attrNames.add("Math.cos(phi)*Math.cos(chi2)");
        attrNames.add("getProperty(GLY,r)");
        attrNames.add("Math.sin(psi)*Math.cos(chi)");
        attrNames.add("getProperty(GLU,r)");
        attrNames.add("getProperty(SER,r)");
        attrNames.add("Math.cos(psi)*Math.cos(chi2)");
        attrNames.add("Math.cos(phi)");
        attrNames.add("getProperty(DISULFIDE,r)");
        attrNames.add("Math.cos(psi)*getProperty(HYDROPHOBICITY,r+1)");
        attrNames.add("Math.sin(phi)*getProperty(CHARGE,r-1)");
        attrNames.add("Math.sin(psi)*getProperty(PROLINE,r+1)");
        attrNames.add("hbond1");
        attrNames.add("getProperty(GLN,r)");
        attrNames.add("Math.sin(psi)*getProperty(HYDROPHOBICITY,r+1)");
        attrNames.add("Math.cos(chi)*Math.cos(chi2)");
        attrNames.add("Math.cos(phi)*getProperty(PROLINE,r-1)");
        attrNames.add("Math.cos(chi)*Math.cos(psi)");
        attrNames.add("Math.sin(2*phi)");
        attrNames.add("Math.cos(phi)*Math.cos(phiS)");
        attrNames.add("getProperty(ASP,r)");
        attrNames.add("getProperty(TRP,r)");
        attrNames.add("Math.sin(phi)");
        attrNames.add("Math.sin(phi)*Math.cos(chi)");
        attrNames.add("getProperty(HIS,r)");
        attrNames.add("Math.cos(psi)*getProperty(CHARGE,r+1)");
        attrNames.add("Math.sin(chi)*Math.cos(chi2)");
        attrNames.add("Math.cos(chi)");
        attrNames.add("Math.cos(psiP)");
        attrNames.add("Math.sin(phiS)");
        attrNames.add("getProperty(THR,r)");
        attrNames.add("Math.sin(phi)*getProperty(AROMATIC,r-1)");
        attrNames.add("Math.sin(chi2)*Math.cos(chi)");
        attrNames.add("Math.sin(chi2)");
        attrNames.add("Math.cos(phi)*getProperty(AROMATIC,r-1)");
        attrNames.add("Math.sin(psiP)");
        attrNames.add("Math.sin(psi)*getProperty(BULK,r+1)");
        attrNames.add("Math.cos(2*psi)");
        attrNames.add("getProperty(CYS,r)");
        attrNames.add("getProperty(ARG,r)");
        attrNames.add("getProperty(VAL,r)");
        attrNames.add("getProperty(PHE,r)");
        attrNames.add("eshift");
        attrNames.add("Math.sin(psi)*Math.cos(chi2)");
        attrNames.add("Math.cos(chi2)");
        attrNames.add("Math.cos(2*chi)");
        attrNames.add("Math.cos(phi)*Math.cos(psiP)");
        attrNames.add("Math.cos(phiS)");
        attrNames.add("Math.sin(psi)*Math.sin(chi2)");
        attrNames.add("Math.sin(psi)*Math.sin(phi)");
        attrNames.add("Math.sin(psi)*Math.cos(phi)");
        attrNames.add("Math.sin(psi)*getProperty(AROMATIC,r+1)");
        attrNames.add("Math.sin(psi)*Math.sin(chi)");
    }

    public Map<String, Double> getAttributes(Atom atom) {
        Residue residue = (Residue) atom.entity;
        Double psiP = null;
        Double phiS = null;
        if (residue.previous != null) {
            psiP = residue.previous.calcPsi();
        }
        Double phi = residue.calcPhi();
        Double psi = residue.calcPsi();
        Double chi = residue.calcChi();
        Double chi2 = residue.calcChi2();
        if (residue.next != null) {
            phiS = residue.next.calcPsi();
        }
        double[] attributes = new double[attrNames.size()];
        int r = Integer.parseInt(residue.getNumber());
        Map<String, Double> attrMap = getAttributes(r, psiP, phi, psi, phiS, chi, chi2, atom, true, true);
        return attrMap;
    }

    public Map<String, Double> getAttributes(int r, Double psiP, Double phi, Double psi, Double phiS, Double chi, Double chi2, Atom atom, boolean calcHBond, boolean calcEshift) {
        Map<String, Double> attrMap = new HashMap<>();
        Double hbond1 = null;
        Double hbond2 = null;
        Double hbond3 = null;
        if (calcHBond && atom.getName().equals("H")) {
            hbond1 = calcHBondShift(hBondMapH, atom, 1);
            hbond2 = calcHBondShift(hBondMapH, atom, 2);
            hbond3 = calcHBondShift(hBondMapH, atom, 3);
        } else if (calcHBond && atom.getName().startsWith("HA")) {
            hbond1 = calcHBondShift(hBondMapHA, atom, 1);
            hbond2 = calcHBondShift(hBondMapHA, atom, 2);
            hbond3 = calcHBondShift(hBondMapHA, atom, 3);
        }

        attrMap.put("hbond1", hbond1);
        attrMap.put("hbond2", hbond2);
        attrMap.put("hbond3", hbond3);

        Double eshift = null;
        if (calcEshift && atom.getName().equals("H")) {
            eshift = calcEInteractionShift(eShiftMapH, atom);
        } else if (calcEshift && atom.getName().startsWith("HA")) {
            eshift = calcEInteractionShift(eShiftMapHA, atom);
        }
        attrMap.put("eshift", eshift);

        Double ringshift = calcRingShift(atom);
        attrMap.put("ringshift", ringshift);

        Double lcmb = calcLCMB(atom);
        attrMap.put("lcmb", lcmb);

        attrMap.put("psiP", psiP);
        attrMap.put("phi", phi);
        attrMap.put("psi", psi);
        attrMap.put("phiS", phiS);
        attrMap.put("chi", chi);
        attrMap.put("chi2", chi2);

        for (int iProp = 0; iProp <= DISULFIDE; iProp++) {
            for (int iRes = -1; iRes <= 1; iRes++) {
                double propValue = getProperty(iProp, r - iRes);
                String propExt = "";
                if (iRes < 0) {
                    propExt = "P";
                } else if (iRes > 0) {
                    propExt = "S";
                }
                attrMap.put(PROPS[iProp] + propExt, propValue);
            }
        }
        return attrMap;
    }

    void genAttributes(double[] attrValue, int r, Double psiP, Double phi, Double psi, Double phiS, Double chi, Double chi2, Atom atom, boolean calcHBond, boolean calcEshift) {
        Double hbond1 = null;
        Double hbond2 = null;
        Double hbond3 = null;
        Double eshift = null;
        Double ringshift = null;
        if (calcHBond && atom.getName().equals("H")) {
            hbond1 = calcHBondShift(hBondMapH, atom, 1);
            hbond2 = calcHBondShift(hBondMapH, atom, 2);
            hbond3 = calcHBondShift(hBondMapH, atom, 3);
        } else if (calcHBond && atom.getName().startsWith("HA")) {
            hbond1 = calcHBondShift(hBondMapHA, atom, 1);
            hbond2 = calcHBondShift(hBondMapHA, atom, 2);
            hbond3 = calcHBondShift(hBondMapHA, atom, 3);
        }
        if (calcEshift && atom.getName().equals("H")) {
            eshift = calcEInteractionShift(eShiftMapH, atom);
        } else if (calcEshift && atom.getName().startsWith("HA")) {
            eshift = calcEInteractionShift(eShiftMapHA, atom);
        }
        ringshift = calcRingShift(atom);
        if (checkAngles(psiP, psi)) {
            attrValue[0] = Math.cos(psi) * Math.cos(psiP);
        } else {
            attrValue[0] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[1] = Math.cos(phi) * getProperty(HYDROPHOBICITY, r - 1);
        } else {
            attrValue[1] = 0.0;
        }
        attrValue[2] = isResidue("ASN", r);
        if (checkAngles(phi)) {
            attrValue[3] = Math.cos(2 * phi);
        } else {
            attrValue[3] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[4] = Math.cos(3 * psi);
        } else {
            attrValue[4] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[5] = Math.sin(psi) * getProperty(CHARGE, r + 1);
        } else {
            attrValue[5] = 0.0;
        }
        attrValue[6] = 1.0;
        if (checkAngles(phi, psi)) {
            attrValue[7] = Math.cos(psi) * Math.cos(phi);
        } else {
            attrValue[7] = 0.0;
        }
        if (checkAngles(phi, chi)) {
            attrValue[8] = Math.sin(phi) * Math.sin(chi);
        } else {
            attrValue[8] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[9] = Math.cos(psi);
        } else {
            attrValue[9] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[10] = Math.cos(phi) * getProperty(BULK, r - 1);
        } else {
            attrValue[10] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[11] = Math.cos(3 * phi);
        } else {
            attrValue[11] = 0.0;
        }
        attrValue[12] = isResidue("LYS", r);
        attrValue[13] = isResidue("TYR", r);
        if (checkAngles(phi, psi)) {
            attrValue[14] = Math.cos(psi) * Math.sin(phi);
        } else {
            attrValue[14] = 0.0;
        }
        if (checkAngles(phi, chi)) {
            attrValue[15] = Math.cos(phi) * Math.cos(chi);
        } else {
            attrValue[15] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[16] = Math.sin(phi) * getProperty(PROLINE, r - 1);
        } else {
            attrValue[16] = 0.0;
        }
        if (checkAngles(chi, chi2)) {
            attrValue[17] = Math.sin(2 * chi2);
        } else {
            attrValue[17] = 0.0;
        }
        if (checkAngles(phi, chi, chi2)) {
            attrValue[18] = Math.sin(phi) * Math.sin(chi2);
        } else {
            attrValue[18] = 0.0;
        }
        if (checkAngles(chi, chi2)) {
            attrValue[19] = Math.cos(2 * chi2);
        } else {
            attrValue[19] = 0.0;
        }
        if (checkAngles(phi, phiS, chi)) {
            attrValue[20] = Math.cos(chi) * Math.cos(phiS);
        } else {
            attrValue[20] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[21] = Math.sin(2 * psi);
        } else {
            attrValue[21] = 0.0;
        }
        if (hbond3 != null) {
            attrValue[22] = hbond3;
        }
        if (checkAngles(psi)) {
            attrValue[23] = Math.sin(psi);
        } else {
            attrValue[23] = 0.0;
        }
        attrValue[24] = isResidue("MET", r);
        if (checkAngles(phi, psi, phiS)) {
            attrValue[25] = Math.cos(psi) * Math.cos(phiS);
        } else {
            attrValue[25] = 0.0;
        }
        if (checkAngles(psiP, psi, chi)) {
            attrValue[26] = Math.cos(chi) * Math.cos(psiP);
        } else {
            attrValue[26] = 0.0;
        }
        if (checkAngles(phi, chi, chi2)) {
            attrValue[27] = Math.sin(phi) * Math.cos(chi2);
        } else {
            attrValue[27] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[28] = Math.sin(phi) * getProperty(HYDROPHOBICITY, r - 1);
        } else {
            attrValue[28] = 0.0;
        }
        if (checkAngles(chi)) {
            attrValue[29] = Math.sin(chi);
        } else {
            attrValue[29] = 0.0;
        }
        attrValue[30] = isResidue("ILE", r);
        attrValue[31] = isResidue("ALA", r);
        if (checkAngles(phi)) {
            attrValue[32] = Math.sin(phi) * getProperty(BULK, r - 1);
        } else {
            attrValue[32] = 0.0;
        }
        if (checkAngles(chi)) {
            attrValue[33] = Math.sin(2 * chi);
        } else {
            attrValue[33] = 0.0;
        }
        if (ringshift != null) {
            attrValue[34] = ringshift;
        }
        if (checkAngles(phi)) {
            attrValue[35] = Math.cos(phi) * getProperty(CHARGE, r - 1);
        } else {
            attrValue[35] = 0.0;
        }
        attrValue[36] = isResidue("LEU", r);
        if (checkAngles(phi, chi, chi2)) {
            attrValue[37] = Math.cos(phi) * Math.cos(chi2);
        } else {
            attrValue[37] = 0.0;
        }
        attrValue[38] = isResidue("GLY", r);
        if (checkAngles(psi, chi)) {
            attrValue[39] = Math.sin(psi) * Math.cos(chi);
        } else {
            attrValue[39] = 0.0;
        }
        attrValue[40] = isResidue("GLU", r);
        attrValue[41] = isResidue("SER", r);
        if (checkAngles(psi, chi, chi2)) {
            attrValue[42] = Math.cos(psi) * Math.cos(chi2);
        } else {
            attrValue[42] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[43] = Math.cos(phi);
        } else {
            attrValue[43] = 0.0;
        }
        attrValue[44] = getProperty(DISULFIDE, r);
        if (checkAngles(psi)) {
            attrValue[45] = Math.cos(psi) * getProperty(HYDROPHOBICITY, r + 1);
        } else {
            attrValue[45] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[46] = Math.sin(phi) * getProperty(CHARGE, r - 1);
        } else {
            attrValue[46] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[47] = Math.sin(psi) * getProperty(PROLINE, r + 1);
        } else {
            attrValue[47] = 0.0;
        }
        if (hbond1 != null) {
            attrValue[48] = hbond1;
        }
        attrValue[49] = isResidue("GLN", r);
        if (checkAngles(psi)) {
            attrValue[50] = Math.sin(psi) * getProperty(HYDROPHOBICITY, r + 1);
        } else {
            attrValue[50] = 0.0;
        }
        if (checkAngles(chi, chi2)) {
            attrValue[51] = Math.cos(chi) * Math.cos(chi2);
        } else {
            attrValue[51] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[52] = Math.cos(phi) * getProperty(PROLINE, r - 1);
        } else {
            attrValue[52] = 0.0;
        }
        if (checkAngles(psi, chi)) {
            attrValue[53] = Math.cos(chi) * Math.cos(psi);
        } else {
            attrValue[53] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[54] = Math.sin(2 * phi);
        } else {
            attrValue[54] = 0.0;
        }
        if (checkAngles(phi, phiS)) {
            attrValue[55] = Math.cos(phi) * Math.cos(phiS);
        } else {
            attrValue[55] = 0.0;
        }
        attrValue[56] = isResidue("ASP", r);
        attrValue[57] = isResidue("TRP", r);
        if (checkAngles(phi)) {
            attrValue[58] = Math.sin(phi);
        } else {
            attrValue[58] = 0.0;
        }
        if (checkAngles(phi, chi)) {
            attrValue[59] = Math.sin(phi) * Math.cos(chi);
        } else {
            attrValue[59] = 0.0;
        }
        attrValue[60] = isResidue("HIS", r);
        if (checkAngles(psi)) {
            attrValue[61] = Math.cos(psi) * getProperty(CHARGE, r + 1);
        } else {
            attrValue[61] = 0.0;
        }
        if (checkAngles(chi, chi2)) {
            attrValue[62] = Math.sin(chi) * Math.cos(chi2);
        } else {
            attrValue[62] = 0.0;
        }
        if (checkAngles(chi)) {
            attrValue[63] = Math.cos(chi);
        } else {
            attrValue[63] = 0.0;
        }
        if (checkAngles(psiP, psi)) {
            attrValue[64] = Math.cos(psiP);
        } else {
            attrValue[64] = 0.0;
        }
        if (checkAngles(phi, phiS)) {
            attrValue[65] = Math.sin(phiS);
        } else {
            attrValue[65] = 0.0;
        }
        attrValue[66] = isResidue("THR", r);
        if (checkAngles(phi)) {
            attrValue[67] = Math.sin(phi) * getProperty(AROMATIC, r - 1);
        } else {
            attrValue[67] = 0.0;
        }
        if (checkAngles(chi, chi2)) {
            attrValue[68] = Math.sin(chi2) * Math.cos(chi);
        } else {
            attrValue[68] = 0.0;
        }
        if (checkAngles(chi, chi2)) {
            attrValue[69] = Math.sin(chi2);
        } else {
            attrValue[69] = 0.0;
        }
        if (checkAngles(phi)) {
            attrValue[70] = Math.cos(phi) * getProperty(AROMATIC, r - 1);
        } else {
            attrValue[70] = 0.0;
        }
        if (checkAngles(psiP, psi)) {
            attrValue[71] = Math.sin(psiP);
        } else {
            attrValue[71] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[72] = Math.sin(psi) * getProperty(BULK, r + 1);
        } else {
            attrValue[72] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[73] = Math.cos(2 * psi);
        } else {
            attrValue[73] = 0.0;
        }
        attrValue[74] = isResidue("CYS", r);
        attrValue[75] = isResidue("ARG", r);
        attrValue[76] = isResidue("VAL", r);
        attrValue[77] = isResidue("PHE", r);
        if (eshift != null) {
            attrValue[78] = eshift;
        }
        if (checkAngles(psi, chi, chi2)) {
            attrValue[79] = Math.sin(psi) * Math.cos(chi2);
        } else {
            attrValue[79] = 0.0;
        }
        if (checkAngles(chi, chi2)) {
            attrValue[80] = Math.cos(chi2);
        } else {
            attrValue[80] = 0.0;
        }
        if (checkAngles(chi)) {
            attrValue[81] = Math.cos(2 * chi);
        } else {
            attrValue[81] = 0.0;
        }
        if (checkAngles(psiP, phi, psi)) {
            attrValue[82] = Math.cos(phi) * Math.cos(psiP);
        } else {
            attrValue[82] = 0.0;
        }
        if (checkAngles(phi, phiS)) {
            attrValue[83] = Math.cos(phiS);
        } else {
            attrValue[83] = 0.0;
        }
        if (checkAngles(psi, chi, chi2)) {
            attrValue[84] = Math.sin(psi) * Math.sin(chi2);
        } else {
            attrValue[84] = 0.0;
        }
        if (checkAngles(phi, psi)) {
            attrValue[85] = Math.sin(psi) * Math.sin(phi);
        } else {
            attrValue[85] = 0.0;
        }
        if (checkAngles(phi, psi)) {
            attrValue[86] = Math.sin(psi) * Math.cos(phi);
        } else {
            attrValue[86] = 0.0;
        }
        if (checkAngles(psi)) {
            attrValue[87] = Math.sin(psi) * getProperty(AROMATIC, r + 1);
        } else {
            attrValue[87] = 0.0;
        }
        if (checkAngles(psi, chi)) {
            attrValue[88] = Math.sin(psi) * Math.sin(chi);
        } else {
            attrValue[88] = 0.0;
        }
    }

}
